Class Src.CleanCity.Logic.StatusLogic Extends Src.CleanCity.Logic.BaseLogic
{

ClassMethod GetById(id As %Integer) As Src.CleanCity.DTO.CategoryDTO
{
	set object = ##class(Src.CleanCity.DAL.Status).GetById(id)
	
	set dto = ##class(Src.CleanCity.DTO.StatusDTO).%New()
	
	set dto.id = object.%Id()
	set dto.name = object.Name
	
	return dto
}

ClassMethod GetByObject(obj As Src.CleanCity.Data.Category) As Src.CleanCity.DTO.CategoryDTO
{
	set result = ##class(Src.CleanCity.DTO.StatusDTO).%New()
 	set result.id = obj.%Id()
 	set result.name = obj.Name
 
 	return result
}

ClassMethod GetAll() As %ListOfObjects
{
	set rs = ##class(Src.CleanCity.DAL.Status).GetResultSetAll()
 
 	set result = ##class(%ListOfObjects).%New()
 	
 	while (rs.%Next() '= 0){
	 	
  		set obj = rs.GetObject()
		do result.Insert(..GetByObject(obj))
 	}
 	return result
}

ClassMethod Save(data As Src.CleanCity.DTO.StatusDTO)
{
	set obj = ##class(Src.CleanCity.DAL.Status).GetByIdOrCreate(data.id)
 	
 	set obj.Name = data.name

 	do ##class(Src.CleanCity.DAL.Status).Save(obj)
}

}

