Class Src.CleanCity.Logic.ResponsibleLogic Extends BaseLogic
{

ClassMethod GetById(id As %Integer) As Src.CleanCity.DTO.ResponsibleDTO
{
	set object = ##class(Src.CleanCity.DAL.Responsible).GetById(id)
	
	set dto = ##class(Src.CleanCity.DTO.ResponsibleDTO).%New()
	
	set dto.id = object.%Id()
	set dto.name = object.Name
	set dto.phone = object.Phone
	set dto.email = object.Email
	
	return dto
}

ClassMethod GetAll() As %ListOfObjects
{
	
	set rs = ##class(Src.CleanCity.DAL.Responsible).GetAll()
	set result = ##class(%ListOfObjects).%New()
	while (rs.%Next() '=0) {
		set obj = rs.GetObject()
		do result.Insert(..GetByObject(obj))
		
	}	
	return result
}

ClassMethod GetByObject(obj As Src.CleanCity.Data.Responsible) As Src.CleanCity.DTO.ResponsibleDTO
{
  set result = ##class(Src.CleanCity.DTO.ResponsibleDTO).%New()
  set result.id = obj.%Id()
  set result.name = obj.Name
  set result.phone = obj.Phone
  set result.email = obj.Email
  return result
}

ClassMethod Save(data As Src.CleanCity.DTO.ResponsibleDTO)
{
	set obj = ##class(Src.CleanCity.DAL.Responsible).GetByIdOrCreate(data.id)
 	
 	set obj.Name = data.name
 	
 	set obj.Phone = data.phone
 	
 	set obj.Email = data.email 

 	do ##class(Src.CleanCity.DAL.Responsible).Save(obj)
}

ClassMethod Delete(id As %Integer)
{
	set resp = ##class(Src.CleanCity.DAL.Responsible).GetById(id)
	if (resp.Areas.Count() '= 0) {
		$$$throw("You can't delete responsible with at least one area")
	}
	
	do ##class(Src.CleanCity.DAL.Responsible).Delete(id)
}

}

