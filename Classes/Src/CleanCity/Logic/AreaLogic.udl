Include Src.Utils.Macro

Class Src.CleanCity.Logic.AreaLogic Extends %Persistent
{

ClassMethod GetById(id As %Integer) As Src.CleanCity.DTO.AreaDTO
{
	set object = ##class(Src.CleanCity.DAL.Area).GetById(id)
	
	set dto = ##class(Src.CleanCity.DTO.AreaDTO).%New()
	
	set dto.id = object.%Id()
	set dto.responsible = ##class(Src.CleanCity.ResponsibleLogic).GetByObject(object.Responsible)
	
	return dto
}

ClassMethod GetAll() As %ListOfObjects
{
	
	set rs = ##class(Src.CleanCity.DAL.Area).GetAll()
	set result = ##class(%ListOfObjects).%New()
	while (rs.%Next() '=0) {
		set obj = rs.GetObject()
		do result.Insert(..GetByObject(obj))
		
	}	
	return result
}

ClassMethod GetByObject(obj As Src.CleanCity.Data.Area) As Src.CleanCity.DTO.AreaDTO
{
  set result = ##class(Src.CleanCity.DTO.AreaDTO).%New()
  set result.id = obj.%Id()
  set result.responsible = ##class(Src.CleanCity.ResponsibleLogic).GetByObject(obj.Responsible)
  set result.geoPoints = ##class(%ListOfObjects).%New()
  for i=1:1:obj.GeoPoints.Count(){
	  set point = obj.GeoPoints.GetAt(i)
	  set pointDto = ##class(Src.CleanCity.DTO.GeoPointDTO).%New()
	  set pointDto.latitude = point.Latitude
	  set pointDto.longitude = point.Longitude
	  $$$do(result.geoPoints.Insert(pointDto))
  }
  return result
}

ClassMethod Save(dto As Src.CleanCity.DTO.AreaDTO)
{
	set result = ##class(Src.CleanCity.DAL.Area).GetByIdOrCreate(dto.id)
 	
 	for i=1:1:dto.geoPoints.Count() {
	 set point = dto.geoPoints.GetAt(i)
	 set pointDto = ##class(Src.CleanCity.Data.GeoPoint).%New()
	 set pointDto.Latitude = point.latitude
	 set pointDto.Longitude = point.longitude
	 $$$do(result.GeoPoints.Insert(pointDto))	
 	}
 	set result.Responsible = ##class(Src.CleanCity.DAL.Responsible).GetById(dto.responsible.id)
 	do ##class(Src.CleanCity.DAL.Area).Save(result)
}

Storage Default
{
<Data name="AreaLogicDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
<DataLocation>^Src.CleanCity.Logic.AreaLogicD</DataLocation>
<DefaultData>AreaLogicDefaultData</DefaultData>
<IdLocation>^Src.CleanCity.Logic.AreaLogicD</IdLocation>
<IndexLocation>^Src.CleanCity.Logic.AreaLogicI</IndexLocation>
<StreamLocation>^Src.CleanCity.Logic.AreaLogicS</StreamLocation>
<Type>%Library.CacheStorage</Type>
}

}

